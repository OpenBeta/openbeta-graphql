name: 'tests'

on:
  push:
    branches:
    - develop

  pull_request:

  release:
    types: [published]

jobs:
  # deploy to staging by commiting to api-server-deployment repo
  deploy-staging:
    runs-on: ubuntu-22.04
    if: github.ref_name == 'develop'
    needs: docker
    steps:
      - name: 'Checkout Project'
        uses: 'actions/checkout@v4'
        with:
          fetch-depth: 1
          repository: 'openbeta/api-server-deployment'
          token: ${{ secrets.GH_DEPLOYMENT_REPO_TOKEN }}
          ref: main
      - uses: imranismail/setup-kustomize@v2
      - run: |
          cd stage
          kustomize edit set image vnguyen/openbeta-graph-api:sha-${GITHUB_SHA}
      - name: Check if there is any change
        id: get_changes
        run: echo "changed=$(git status --porcelain | wc -l)" >> $GITHUB_OUTPUT
      - name: Push if tag has changes
        if: steps.get_changes.outputs.changed != 0
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git commit -am "Update deployment. Code=${GITHUB_SHA}"
          git push

  # deploy to prod by commiting to api-server-deployment repo
  deploy-prod:
    runs-on: ubuntu-22.04
    if: startsWith(github.ref, 'refs/tags/v')
    needs: docker
    steps:
      - name: 'Checkout Project'
        uses: 'actions/checkout@v4'
        with:
          fetch-depth: 1
          repository: 'openbeta/api-server-deployment'
          token: ${{ secrets.GH_DEPLOYMENT_REPO_TOKEN }}
          ref: main
      - uses: imranismail/setup-kustomize@v2
      - run: |
          cd prod
          kustomize edit set image vnguyen/openbeta-graph-api:${GITHUB_REF_NAME}
      - name: Check if there is any change
        id: get_changes
        run: echo "changed=$(git status --porcelain | wc -l)" >> $GITHUB_OUTPUT
      - name: Push if tag has changes
        if: steps.get_changes.outputs.changed != 0
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git commit -am "Update deployment. Code=${GITHUB_REF_NAME}"
          git push

  # build docker image and push to registry
  docker:
    runs-on: ubuntu-22.04
    needs: test
    steps:
      - name: 'Checkout Project'
        uses: 'actions/checkout@v3'
        with:
          fetch-depth: 1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        if: github.event_name != 'pull_request'
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            vnguyen/openbeta-graph-api
          tags: |
            type=ref,event=branch
            type=semver,pattern={{raw}}
            type=sha,format=long

      - name: Build docker image
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ./Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}

  # setup basic machine to run all kinds of tests: lint, unit, integration, types
  test:
    runs-on: 'ubuntu-22.04'
    steps:
      - name: 'Checkout Project'
        uses: 'actions/checkout@v3'
        with:
          fetch-depth: 1

      - name: Setup Node.js environment
        uses: actions/setup-node@v3
        with:
          node-version: '16.15'
          cache: 'yarn'

      - name: Start MongoDB
        uses: supercharge/mongodb-github-action@1.8.0
        with:
          mongodb-version: 5
          mongodb-replica-set: rs0

      - name: Install dependencies
        run: yarn install --immutable

      - name: Lint code
        run: yarn lint

      - name: Wait for the database to start
        run: wget -qO- https://raw.githubusercontent.com/eficode/wait-for/$WAIT_FOR_VERSION/wait-for | sh -s -- localhost:27017 -- echo "Database is up"
        env:
          WAIT_FOR_VERSION: 4df3f9262d84cab0039c07bf861045fbb3c20ab7 # v2.2.3
      
      - name: Setup test user
        run: |
           source .env && \
           docker exec mongodb mongosh admin --eval "db.createUser({user: '${MONGO_INITDB_ROOT_USERNAME}', pwd: '${MONGO_INITDB_ROOT_PASSWORD}', roles: ['readWrite']})"

      - name: Restart mongo
        run: |
          docker container restart mongodb

      - name: Run tests
        run: yarn test --ci

      - name: Build sources
        run: yarn build-release --noEmit
