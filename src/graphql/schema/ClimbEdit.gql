type Mutation {
  """
  Create or update one or more climbs.
  """
  updateClimbs(input: UpdateClimbsInput): [ID]

  """
  Delete one or more climbs
  """
  deleteClimbs(input: DeleteManyClimbsInput): Int
}

input DeleteManyClimbsInput {
  parentId: ID
  idList: [ID]
}

"""
Create/update climbs input parameter.
"""
input UpdateClimbsInput {
  "Parent area ID"
  parentId: ID!
  "Array of change records"
  changes: [SingleClimbChangeInput]
}

"""
Climb change record.  If the climb ID is omitted or does not exist in the database, a new climb will be created.
"""
input SingleClimbChangeInput {
  "Climb UUID"
  id: ID
  name: String
  disciplines: DisciplineType
  grade: String
  leftRightIndex: Int
  description: String
  location: String
  protection: String
  "Legacy FA data"
  fa: String
  "Length in meters"
  length: Int
  "Number of fixed anchors"
  boltsCount: Int
  "List of Pitch objects representing individual pitches of a multi-pitch climb"
  pitches: [PitchInput]
  experimentalAuthor: ExperimentalAuthorType
}

input GradeTypeInput {
  vscale: String
  yds: String
  ewbank: String
  french: String
  brazilianCrux: String
  font: String
  uiaa: String
}

input PitchInput {
  id: ID!
  parentId: ID!
  pitchNumber: Int!
  grades: GradeTypeInput
  disciplines: DisciplineType
}

input DisciplineType {
  trad: Boolean
  sport: Boolean
  bouldering: Boolean
  deepwatersolo: Boolean
  alpine: Boolean
  snow: Boolean
  ice: Boolean
  mixed: Boolean
  aid: Boolean
  tr: Boolean
}


input GradeType {
  vscale: String
  yds: String
  ewbank: String
  french: String
  brazilianCrux: String
  font: String
  uiaa: String
}

input ExperimentalAuthorType {
  displayName: String!
  url: String!
}

input Pitch {
  id: ID!
  parentId: ID!
  pitchNumber: Int!
  grades: GradeType
  type: DisciplineType
  length: Int
  boltsCount: Int
  description: String
}