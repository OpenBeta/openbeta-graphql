type Mutation {
  setTag(input: MediaInput): TagEntryResult
}

type Mutation {
  removeTag(tagId: ID!): DeleteTagResult
}

type Query {
  getTagsByMediaIdList(uuidList: [ID]): [TagEntryResult]
}

type Query {
  getRecentTags(userLimit: Int): [MediaListByAuthorType]
}

type Query {
  getUserMedia(userUuid: ID!, limit: Int): [MediaWithTags]
}

type Query {
  """
  Get a list of users and their tagged photo count
  """
  getTagsLeaderboard(limit: Int): [TagsLeaderboardType]
}

type TagsLeaderboardType {
  userUuid: ID!
  total: Int!
}

"Media metadata"
interface IMediaMetadata {
  width: Int!
  height: Int!
  format: String!
  mtime: Date!
  birthTime: Date!
  size: Int!
}

"Attributes of a tag"
interface ITag {
  id: ID!
  username: String
  mediaUuid: ID!
  mediaUrl: String!
  mediaType: Int!
  destination: ID!
  destType: Int!
}

"An area tag"
type AreaTag implements ITag & IMediaMetadata {
  id: ID!
  username: String
  mediaUuid: ID!
  mediaUrl: String!
  mediaType: Int!
  destination: ID!
  destType: Int!
  width: Int!
  height: Int!
  format: String!
  mtime: Date!
  birthTime: Date!
  size: Int!
  area: Area
}

"A climb tag"
type ClimbTag implements ITag & IMediaMetadata{
  id: ID!
  username: String
  mediaUuid: ID!
  mediaUrl: String!
  mediaType: Int!
  destination: ID!
  destType: Int!
  width: Int!
  height: Int!
  format: String!
  mtime: Date!
  birthTime: Date!
  size: Int!
  climb: Climb
}

union MediaTag = AreaTag | ClimbTag

"Representing a tag without the tagged climb/area. Used by climb & area queries."
type BaseTag implements ITag & IMediaMetadata {
  id: ID!
  username: String
  mediaUuid: ID!
  mediaUrl: String!
  mediaType: Int!
  destination: ID!
  destType: Int!
  width: Int!
  height: Int!
  format: String!
  mtime: Date!
  birthTime: Date!
  size: Int!
}

"All tags by an author"
type MediaListByAuthorType {
  authorUuid: ID!
  tagList: [MediaTag]
}

type SimpleTag {
  id: ID!
  name: String!
  type: Int!
}

type MediaWithTags implements IMediaMetadata {
  username: String
  mediaUrl: String!
  width: Int!
  height: Int!
  format: String!
  mtime: Date!
  birthTime: Date!
  size: Int!
  climbTags: [SimpleTag]
  areaTags: [SimpleTag]
}

union TagEntryResult = ClimbTag | AreaTag

"Result of a delete tag operation"
type DeleteTagResult {
  id: ID!
  mediaUuid: ID!
  destinationId: ID!
  destType: Int!
}

"Input param for creating a new tag"
input MediaInput {
  mediaUuid: ID!
  mediaUrl: String!
  mediaType: Int!
  destinationId: ID!
  destType: Int!
}
