type Mutation {
  setTag(input: MediaInput): MediaWithTags
}

type Mutation {
  removeTag(tagId: ID!): DeleteTagResult
}

type Query {
  """
  Get recent media with tags group by users.
  """
  getRecentTags(maxUsers: Int, maxFiles: Int): [MediaByUsers]

  """
  Get all media belonging to a user (media with or without tags).
  """
  getUserMedia(userUuid: ID!, maxFiles: Int): [MediaWithTags]

  """
  Get a list of users and their tagged photo count
  """
  getTagsLeaderboard(limit: Int): TagsLeaderboard
}

type TagsByUser {
  username: String
  userUuid: ID!
  total: Int!
}

type AllTimeTags {
  totalMediaWithTags: Int!
  byUsers: [TagsByUser]!
}

type TagsLeaderboard {
  allTime: AllTimeTags
}

"Media object metadata"
interface IMediaMetadata {
  """Unique id"""
  id: ID!

  """Width in pixels"""
  width: Int!

  """Height in pixels"""
  height: Int!

  """Valid format: jpeg, png, webp, avif"""
  format: String!

  """Upload time"""
  uploadTime: Date!

  """File size in bytes"""
  size: Int!
}

"All tags by an author"
type MediaByUsers {
  username: String
  userUuid: ID!
  mediaWithTags: [MediaWithTags]
}

"""A tag target (an area or a climb)"""
type EntityTag {
  id: ID!
  """Area or climb ID"""
  targetId: ID!
  """Climb name"""
  climbName: String
  """Area name"""
  areaName: String!

  """ancestors name"""
  ancestors: String!
  """Target type: 0: climb, 1: area"""
  type: Int!

  "Longitude"
  lng: Float!

  "Latitude"
  lat: Float!
}

type MediaWithTags implements IMediaMetadata {
  id: ID!
  username: String
  mediaUrl: String!
  width: Int!
  height: Int!
  format: String!
  uploadTime: Date!
  size: Int!
  entityTags: [EntityTag]
}

"Result of a delete tag operation"
type DeleteTagResult {
  id: ID!
  mediaUuid: ID!
  destinationId: ID!
  destType: Int!
}

"Input param for creating a new tag"
input MediaInput {
  mediaUuid: ID!
  mediaUrl: String!
  mediaType: Int!
  destinationId: ID!
  destType: Int!
}
