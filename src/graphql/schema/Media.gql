type Mutation {
  """
  Add an entity tag to a media
  """
  addEntityTag(input: MediaEntityTagInput): EntityTag!

  """
  Remove an entity tag from a media
  """
  removeEntityTag(input: EntityTagDeleteInput!): Boolean!
}

type Query {
  """
  Get recent media with tags group by users.
  """
  getMediaForFeed(input: MediaForFeedInput): [MediaByUsers]

  """
  Get all media belonging to a user (media with or without tags).
  """
  getUserMedia(input: UserMediaInput): [MediaWithTags]

  getUserMediaPagination(input: UserMediaInput): [UserMedia]

  """
  Get a list of users and their tagged photo count
  """
  getTagsLeaderboard(limit: Int): TagsLeaderboard
}

type UserMedia {
  username: String
  userUuid: ID!
  media: MediaConnection!
}

type MediaConnection {
  # total: Int!
  edges: [MediaEdge!]!
  pageInfo: PageInfo!
}

type MediaEdge {
  node: MediaWithTags
  cursor: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  endCursor: String
}

type TagsByUser {
  username: String
  userUuid: ID!
  total: Int!
}

type AllTimeTags {
  totalMediaWithTags: Int!
  byUsers: [TagsByUser]!
}

type TagsLeaderboard {
  allTime: AllTimeTags
}

"Media object metadata"
interface IMediaMetadata {
  """Unique id"""
  id: ID!

  """Width in pixels"""
  width: Int!

  """Height in pixels"""
  height: Int!

  """Valid format: jpeg, png, webp, avif"""
  format: String!

  """Upload time"""
  uploadTime: Date!

  """File size in bytes"""
  size: Int!
}

"All tags by an author"
type MediaByUsers {
  username: String
  userUuid: ID!
  mediaWithTags: [MediaWithTags]
}

"""A tag target (an area or a climb)"""
type EntityTag {
  id: ID!
  """Area or climb ID"""
  targetId: ID!
  """Climb name"""
  climbName: String
  """Area name"""
  areaName: String!

  """ancestors name"""
  ancestors: String!
  """Target type: 0: climb, 1: area"""
  type: Int!

  "Longitude"
  lng: Float!

  "Latitude"
  lat: Float!
}

type MediaWithTags implements IMediaMetadata {
  id: ID!
  username: String
  mediaUrl: String!
  width: Int!
  height: Int!
  format: String!
  uploadTime: Date!
  size: Int!
  entityTags: [EntityTag]
}

"Input param for creating a new tag"
input MediaEntityTagInput {
  "Target media id"
  mediaId: ID!
  "What this tag is pointing to (a climb/area)"
  entityId: ID!
  "0: climb, 1: area"
  entityType: Int!
}

"Input param for deleteing a tag"
input EntityTagDeleteInput {
  mediaId: ID!
  tagId: ID!
}

"Input param for user media query"
input UserMediaInput {
  userUuid: ID!
  maxFiles: Int
  first: Int
  after: ID
}

input MediaForFeedInput {
  maxUsers: Int
  maxFiles: Int
}
